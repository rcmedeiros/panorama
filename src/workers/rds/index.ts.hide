import { isProduction, waitFor, waitUntil } from '../../helpers';

import { PostgreSQLAdapter } from '../../adapters';

export class rds {
  private readonly db: PostgreSQLAdapter;

  public constructor() {
    this.db = PostgreSQLAdapter.getInstance(process.env.DB);
  }

  public start(): void {
    void (async (): Promise<void> => {
      await waitUntil(() => this.db.ready);

      const users: Array<{ username: string; db_username: string }> = (await this.db.executeQuery({
        name: 'getMonitoredUsers',
        text: `
          select
            m.username
            ,m.db_username
          from
            main.members m
          where
            m.monitored = true
        `,
        values: undefined,
      })) as Array<{ username: string; drive_id: string }>;

      const memberCounter: Set<string> = new Set();
      let queriesCounter: number = 0;

      do {
        await waitFor(isProduction() ? 60000 : 5000);

        

        
        if (queriesCounter) {
          console.info(`Logged ${queriesCounter} quer${queriesCounter > 1 ? 'ies' : 'y'} by ${memberCounter.size} member${memberCounter.size > 1 ? 's' : ''}`);
          memberCounter.clear();
          queriesCounter = 0;
        }
      } while (users.length);
    })();
  }
}
